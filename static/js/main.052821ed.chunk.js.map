{"version":3,"sources":["App.tsx","index.tsx"],"names":["getRandomBitSet","min","max","Math","ceil","floor","random","toString","Screen","children","props","className","Section","header","App","React","bits","setBits","interval","setInterval","clearInterval","href","rel","target","JSON","stringify","value","unit","location","role","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.052821ed.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"./utils\";\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getRandomBitSet() {\n  return getRandomInt(300000000000, 500000000000).toString(2);\n}\n\nexport const Screen = ({\n  children,\n  ...props\n}: {\n  children: React.ReactNode;\n}) => (\n  <div\n    {...props}\n    className=\"relative bg-gray-50 min-h-screen w-full overflow-auto\"\n  >\n    <div className=\"relative pt-6 pb-16 sm:pb-24\">\n      <main className=\"mt-16 mx-auto max-w-3xl px-4 sm:mt-24\">{children}</main>\n    </div>\n  </div>\n);\n\nexport const Section = ({\n  children,\n  header,\n  ...props\n}: {\n  header: React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <section\n    {...props}\n    className=\"mt-16 border-l-8 border-green-200 pl-8 relative\"\n  >\n    <header>{header}</header>\n    {children}\n  </section>\n);\n\nexport function Callout(props: React.HTMLProps<HTMLDivElement>) {\n  return (\n    <div\n      {...props}\n      className=\"flex justify-center align-center p-8 space-x-4\"\n    />\n  );\n}\n\nexport function Toggle({\n  children,\n  checked,\n  ...props\n}: React.HTMLProps<HTMLInputElement>) {\n  return (\n    <label\n      className={classNames(\n        \"rounded-md shadow flex items-center justify-center p-8 py-3 border border-transparent text-base font-medium rounded-md text-white md:py-4 md:text-lg md:px-10 cursor-pointer\",\n        checked\n          ? \"bg-green-800 hover:bg-green-900\"\n          : \"bg-green-500 hover:bg-green-700\"\n      )}\n    >\n      {children}\n      <input {...props} type=\"checkbox\" checked={checked} className=\"sr-only\" />\n    </label>\n  );\n}\n\nexport function Button({\n  color = undefined,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & { color?: string }) {\n  return (\n    <button\n      {...props}\n      type=\"button\"\n      className={classNames(\n        \"rounded-md shadow flex items-center justify-center p-8 py-3 border border-transparent text-base font-medium rounded-md text-white md:py-4 md:text-lg md:px-10\",\n        color ? color : \"bg-green-500 hover:bg-green-700\"\n      )}\n    />\n  );\n}\n\nexport default function App() {\n  const [bits, setBits] = React.useState(getRandomBitSet());\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setBits(getRandomBitSet());\n    }, 500);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Screen>\n      <div className=\"text-center\">\n        <h1 className=\"text-5xl tracking-tight font-extrabold text-gray-900 md:text-6xl\">\n          <span className=\"block\">Visual Example</span>\n          <span className=\"block text-green-600\">Data Flows</span>\n        </h1>\n        <p className=\"text-left mt-6 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-12 md:text-xl md:max-w-xl\">\n          Eric Normand's Lispcast is epic. He discusses technical papers and\n          concepts related to software. On his episode{\" \"}\n          <a\n            href=\"https://lispcast.com/what-if-data-is-a-really-bad-idea/\"\n            className=\"underline text-green-600 hover:text-green-700\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            What if data is really a bad idea?\n          </a>{\" \"}\n          , he walks through a converstion between Rich Hickey and Alan Kay from\n          Hackernews. The conversaton and video left me with wanting to dig\n          deeper to visually see how the perspectives\n          play out.\n        </p>\n        <p className=\"text-left text-xs mt-5 max-w-md mx-auto text-gray-500 md:mt-5 md:max-w-xl md:text-base\">\n          Please note:{\" \"}\n          <strong>\n            the representation below is not attempting to faithfully describe\n            the process of how data is transmitted.\n          </strong>{\" \"}\n          It is an attempt to show how data requires interpretation and context.\n        </p>\n      </div>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">Signal of Bits (data)</div>\n            <div className=\"text-gray-500\">\n              A bit stream of 0s and 1s on the hardware is the data. The data\n              would be difficult to interpret at this point. The context is\n              unknown.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl pb-4\">\n          <div\n            className=\"w-full overflow-hidden text-xl font-thin font-mono\"\n            aria-hidden\n          >\n            {bits}\n          </div>\n          <div className=\"sr-only\">\n            A visual of a random set of constantly changing bits.\n          </div>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              Signal of Bits (data) -&gt; Selection of Bits (data)\n            </div>\n            <div className=\"text-gray-500\">\n              A program retrieves this data from the hardware. The group of bits\n              is inbound <strong>data</strong> for the program. Assuming it\n              retrieves a result it can understand, the program can transform\n              this inbound data into outbound data. The program has an internal\n              context of what this data is. From outside of the context of the\n              program it would be difficult to interpret the data.\n            </div>\n          </div>\n        }\n      >\n        <div>\n          <div className=\"w-full max-w-2xl text-xl font-thin font-mono flex\">\n            <div className=\"py-1 text-gray-300\">101</div>\n            <div className=\"py-1 bg-green-200\">\n              01000001111110001011110000010000\n            </div>\n            <div className=\"py-1 text-gray-300\">001</div>\n          </div>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              Selection of Bits (data) -&gt; Floating Point Number (data)\n            </div>\n            <div className=\"text-gray-500\">\n              The program converts the bits from hardware into a floating point\n              number. It's inbound data is bits and its outbound data is a\n              floating point number. It doesn't provide any context of what this\n              number represents.\n            </div>\n            <div className=\"text-gray-500 mt-5\">\n              At this point, another program or a person could recognize this\n              number, but since the context is unclear it would be difficult to\n              use. (E.G.: Is this a Height? Width? Distance? Coordinate?)\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl text-xl font-thin font-mono flex\">\n          <div className=\"py-1\">31.091827392578125</div>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              Floating Point Number (data) -&gt; API Response (data)\n            </div>\n            <div className=\"text-gray-500\">\n              The API pulls the value from an SDK (inbound data) for a\n              temperature sensor. The API has the context of knowing this sensor\n              returns a temperature in Celsius at a specific location. Outbound\n              it builds up a response to send to program requesting the data. It\n              provides this context in the response. At this point, the context\n              around what the data is, is becoming concrete and easier to\n              interpret \"correctly\" by different sources.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl font-thin font-mono flex\">\n          <pre className=\"py-1\">\n            {JSON.stringify(\n              {\n                value: \"31.091827392578125\",\n                unit: \"C\",\n                location: \"Kansas City\"\n              },\n              null,\n              2\n            )}\n          </pre>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              API Response (data) -&gt; HTML (data)\n            </div>\n            <div className=\"text-gray-500\">\n              The response from the api (inbound data) gets converted to HTML.\n              At this point the data has been prepared to be represented\n              visually.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl font-thin font-mono flex\">\n          <pre className=\"py-1\">\n            {`<h1>Kansas City</h1>\n<div>88°F (31°C)</div>\n              `}\n          </pre>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              HTML (data) -&gt; Visual(data)\n            </div>\n            <div className=\"text-gray-500\">\n              The browser then converts the html (inbound data) into a visual\n              (outbound data). At this point an english speaking person could\n              read page as inbound data.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl\">\n          <div className=\"border p-10\">\n            <h1 className=\"font-bold text-2xl\">Kansas City</h1>\n            <div className=\"text-2xl font-thin\">88°F (31°C)</div>\n          </div>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              Visual(data) -&gt; Sweater Weather? (data)\n            </div>\n            <div className=\"text-gray-500\">\n              The user can then take this visual (inbound data) and make a\n              decision about it.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl\">\n          <div className=\"text-2xl\">\n            It's too hot for a sweater...{\" \"}\n            <span role=\"img\" aria-label=\"Way too hot!\">\n              🥵\n            </span>\n          </div>\n        </div>\n      </Section>\n\n      <Section\n        header={\n          <div className=\"py-4\">\n            <div className=\"font-bold text-gray-700\">\n              Sweater Weather?(data) -&gt; ...\n            </div>\n            <div className=\"text-gray-500\">\n              The user can then take this visual (inbound data) and make a\n              decision about it. The data doesn't end here, the user can\n              interpret the inbound data and broadcast new outbound data to\n              their friends, family, followers, or anyone they like, using an\n              assortment of different mediums.\n            </div>\n          </div>\n        }\n      >\n        <div className=\"w-full max-w-2xl\">\n          <div className=\"text-gray-500\"></div>\n          <div className=\"text-2xl mt-3\">\n            <span\n              role=\"img\"\n              aria-label=\"Examples of visual mediums people could use to describe\"\n            >\n              💬📙🎥📸🗞📟📡🔦👕🗿\n            </span>\n          </div>\n        </div>\n      </Section>\n    </Screen>\n  );\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}